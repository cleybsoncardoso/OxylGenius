(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('calendar', ['jquery'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('jquery'));
    } else {
        factory(root.jQuery);
    }
}(this, function($) {

    // config default

    var defaults = {

            width: 280,
            height: 280,

            zIndex: 1,

            trigger: null,

            offset: [0, 1],

            customClass: '',

            view: 'date',

            date: new Date(),
            format: 'yyyy/mm/dd',


            startWeek: 0,


            weekArray: ['日', '一', '二', '三', '四', '五', '六'],

            monthArray: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],

            selectedRang: null,

            data: null,


            label: '{d}\n{v}',


            prev: '&lt;',
            next: '&gt;',


            viewChange: $.noop,

            onSelected: function(view, date, value) {
                // body...
            },

            onMouseenter: $.noop,

            onClose: $.noop
        },



        ACTION_NAMESPACE = 'data-calendar-',

        DISPLAY_VD = '[' + ACTION_NAMESPACE + 'display-date]',
        DISPLAY_VM = '[' + ACTION_NAMESPACE + 'display-month]',

        ARROW_DATE = '[' + ACTION_NAMESPACE + 'arrow-date]',
        ARROW_MONTH = '[' + ACTION_NAMESPACE + 'arrow-month]',

        ITEM_DAY = ACTION_NAMESPACE + 'day',
        ITEM_MONTH = ACTION_NAMESPACE + 'month',

        DISABLED = 'disabled',
        MARK_DATA = 'markData',

        VIEW_CLASS = {
            date: 'calendar-d',
            month: 'calendar-m'
        },

        OLD_DAY_CLASS = 'old',
        NEW_DAY_CLASS = 'new',
        TODAY_CLASS = 'now',
        SELECT_CLASS = 'selected',
        MARK_DAY_HTML = '<i class="dot"></i>',
        DATE_DIS_TPL = '{year}/<span class="m">{month}</span>',

        ITEM_STYLE = 'style="width:{w}px;height:{h}px;line-height:{h}px"',
        WEEK_ITEM_TPL = '<li ' + ITEM_STYLE + '>{wk}</li>',
        DAY_ITEM_TPL = '<li ' + ITEM_STYLE + ' class="{class}" {action}="{date}">{value}</li>',
        MONTH_ITEM_TPL = '<li ' + ITEM_STYLE + ' ' + ITEM_MONTH + '>{m}</li>',

        TEMPLATE = [
            '<div class="calendar-inner">',
            '<div class="calendar-views">',
            '<div class="view view-date">',
            '<div class="calendar-hd">',
            '<a href="javascript:;" data-calendar-display-date class="calendar-display">',
            '{yyyy}/<span class="m">{mm}</span>',
            '</a>',
            '<div class="calendar-arrow">',
            '<span class="prev" data-calendar-arrow-date>{prev}</span>',
            '<span class="next" data-calendar-arrow-date>{next}</span>',
            '</div>',
            '</div>',
            '<div class="calendar-ct">',
            '<ol class="week">{week}</ol>',
            '<ul class="date-items"></ul>',
            '</div>',
            '</div>',
            '<div class="view view-month">',
            '<div class="calendar-hd">',
            '<a href="javascript:;" data-calendar-display-month class="calendar-display">{yyyy}</a>',
            '<div class="calendar-arrow">',
            '<span class="prev" data-calendar-arrow-month>{prev}</span>',
            '<span class="next" data-calendar-arrow-month>{next}</span>',
            '</div>',
            '</div>',
            '<ol class="calendar-ct month-items">{month}</ol>',
            '</div>',
            '</div>',
            '</div>',
            '<div class="calendar-label"><p>HelloWorld</p><i></i></div>'
        ],
        OS = Object.prototype.toString;

    // utils

    function isDate(obj) {
        return OS.call(obj) === '[object Date]';
    }

    function isString(obj) {
        return OS.call(obj) === '[object String]';
    }


    function getClass(el) {
        return el.getAttribute('class') || el.getAttribute('className');
    }

    // métodos de extensão

    String.prototype.repeat = function(data) {
        return this.replace(/\{\w+\}/g, function(str) {
            var prop = str.replace(/\{|\}/g, '');
            return data[prop] || '';
        });
    }

    String.prototype.toDate = function() {
        var dt = new Date(),
            dot = this.replace(/\d/g, '').charAt(0),
            arr = this.split(dot);

        return new Date(parseInt(arr[0]), parseInt(arr[1]) - 1, parseInt(arr[2]));
    }

    Date.prototype.format = function(exp) {
        var y = this.getFullYear(),
            m = this.getMonth() + 1,
            d = this.getDate();

        return exp.replace('yyyy', y).replace('mm', m).replace('dd', d);
    }

    Date.prototype.isSame = function(y, m, d) {
        if (isDate(y)) {
            var dt = y;
            y = dt.getFullYear();
            m = dt.getMonth() + 1;
            d = dt.getDate();
        }
        return this.getFullYear() === y && this.getMonth() + 1 === m && this.getDate() === d;
    }

    Date.prototype.add = function(n) {
        this.setDate(this.getDate() + n);
    }

    Date.prototype.minus = function(n) {
        this.setDate(this.getDate() - n);
    }

    Date.prototype.clearTime = function(n) {
        this.setHours(0);
        this.setSeconds(0);
        this.setMinutes(0);
        this.setMilliseconds(0);
        return this;
    }

    Date.isLeap = function(y) {
        return (y % 100 !== 0 && y % 4 === 0) || (y % 400 === 0);
    }

    Date.getDaysNum = function(y, m) {
        var num = 31;

        switch (m) {
            case 2:
                num = this.isLeap(y) ? 29 : 28;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                num = 30;
                break;
        }
        return num;
    }

    Date.getSiblingsMonth = function(y, m, n) {
        var d = new Date(y, m - 1);
        d.setMonth(m - 1 + n);
        return {
            y: d.getFullYear(),
            m: d.getMonth() + 1
        };
    }

    Date.getPrevMonth = function(y, m, n) {
        return this.getSiblingsMonth(y, m, 0 - (n || 1));
    }

    Date.getNextMonth = function(y, m, n) {
        return this.getSiblingsMonth(y, m, n || 1);
    }

    Date.tryParse = function(obj) {
        if (!obj) {
            return obj;
        }
        return isDate(obj) ? obj : obj.toDate();
    }


    // Classe calendar

    function Calendar(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.calendar.defaults, options);
        this.$element.addClass('calendar ' + this.options.customClass);
        this.width = this.options.width;
        this.height = this.options.height;
        this.date = this.options.date;
        this.selectedRang = this.options.selectedRang;
        this.data = this.options.data;
        this.init();
    }

    Calendar.prototype = {
        constructor: Calendar,
        getDayAction: function(day) {
            var action = ITEM_DAY;
            if (this.selectedRang) {
                var start = Date.tryParse(this.selectedRang[0]),
                    end = Date.tryParse(this.selectedRang[1]);

                if ((start && day < start.clearTime()) || (end && day > end.clearTime())) {
                    action = DISABLED;
                }
            }

            return action;
        },
        getDayData: function(day) {
            var ret, data = this.data;

            if (data) {

                for (var i = 0, len = data.length; i < len; i++) {
                    var item = data[i];

                    if (day.isSame(Date.tryParse(item.date))) {
                        ret = item.value;
                    }
                }
            }

            return ret;
        },
        getDayItem: function(y, m, d, f) {
            var dt = this.date,
                idt = new Date(y, m - 1, d),
                data = {
                    w: this.width / 7,
                    h: this.height / 7,
                    value: d
                },
                markData,
                $item;

            var selected = dt.isSame(y, m, d) ? SELECT_CLASS : '';
            if (f === 1) {
                data['class'] = OLD_DAY_CLASS;
            } else if (f === 3) {
                data['class'] = NEW_DAY_CLASS;
            } else {
                data['class'] = '';
            }

            if (dt.isSame(y, m, d)) {
                data['class'] += ' ' + TODAY_CLASS;
            }

            data.date = idt.format(this.options.format);
            data.action = this.getDayAction(idt);
            markData = this.getDayData(idt);

            $item = $(DAY_ITEM_TPL.repeat(data));

            if (markData) {
                $item.data(MARK_DATA, markData);
                $item.html(d + MARK_DAY_HTML);
            }

            return $item;
        },
        getDaysHtml: function(y, m) {
            var year, month, firstWeek, daysNum, prevM, prevDiff,
                dt = this.date,
                $days = $('<ol class="days"></ol>');

            if (isDate(y)) {
                year = y.getFullYear();
                month = y.getMonth() + 1;
            } else {
                year = Number(y);
                month = Number(m);
            }

            firstWeek = new Date(year, month - 1, 1).getDay() || 7;
            prevDiff = firstWeek - this.options.startWeek;
            daysNum = Date.getDaysNum(year, month);
            prevM = Date.getPrevMonth(year, month);
            prevDaysNum = Date.getDaysNum(year, prevM.m);
            nextM = Date.getNextMonth(year, month);
            // bandeira do mês
            var PREV_FLAG = 1,
                CURR_FLAG = 2,
                NEXT_FLAG = 3,
                count = 0;

            for (var p = prevDaysNum - prevDiff + 1; p <= prevDaysNum; p++, count++) {

                $days.append(this.getDayItem(prevM.y, prevM.m, p, PREV_FLAG));
            }

            for (var c = 1; c <= daysNum; c++, count++) {
                $days.append(this.getDayItem(year, month, c, CURR_FLAG));
            }

            for (var n = 1, nl = 42 - count; n <= nl; n++) {

                $days.append(this.getDayItem(nextM.y, nextM.m, n, NEXT_FLAG));
            }

            return $('<li></li>').width(this.options.width).append($days);
        },
        getWeekHtml: function() {
            var week = [],
                weekArray = this.options.weekArray,
                start = this.options.startWeek,
                len = weekArray.length,
                w = this.width / 7,
                h = this.height / 7;

            for (var i = start; i < len; i++) {
                week.push(WEEK_ITEM_TPL.repeat({
                    w: w,
                    h: h,
                    wk: weekArray[i]
                }));
            }

            for (var j = 0; j < start; j++) {
                week.push(WEEK_ITEM_TPL.repeat({
                    w: w,
                    h: h,
                    wk: weekArray[j]
                }));
            }

            return week.join('');
        },
        getMonthHtml: function() {
            var monthArray = this.options.monthArray,
                month = [],
                w = this.width / 4,
                h = this.height / 4,
                i = 0;

            for (; i < 12; i++) {
                month.push(MONTH_ITEM_TPL.repeat({
                    w: w,
                    h: h,
                    m: monthArray[i]
                }));
            }

            return month.join('');
        },
        setMonthAction: function(y) {
            var m = this.date.getMonth() + 1;

            this.$monthItems.children().removeClass(TODAY_CLASS);
            if (y === this.date.getFullYear()) {
                this.$monthItems.children().eq(m - 1).addClass(TODAY_CLASS);
            }
        },
        fillStatic: function() {
            var staticData = {
                prev: this.options.prev,
                next: this.options.next,
                week: this.getWeekHtml(),
                month: this.getMonthHtml()
            };

            this.$element.html(TEMPLATE.join('').repeat(staticData));
        },
        updateDisDate: function(y, m) {
            this.$disDate.html(DATE_DIS_TPL.repeat({
                year: y,
                month: m
            }));
        },
        updateDisMonth: function(y) {
            this.$disMonth.html(y);
        },
        fillDateItems: function(y, m) {
            var ma = [
                Date.getPrevMonth(y, m), {
                    y: y,
                    m: m
                },
                Date.getNextMonth(y, m)
            ];

            this.$dateItems.html('');
            for (var i = 0; i < 3; i++) {
                var $item = this.getDaysHtml(ma[i].y, ma[i].m);
                this.$dateItems.append($item);
            }

        },
        hide: function(view, date, data) {
            this.$trigger.val(date.format(this.options.format));
            this.options.onClose.call(this, view, date, data);
            this.$element.hide();
        },
        setPosition: function() {
            var post = this.$trigger.offset();
            var offs = this.options.offset;

            this.$element.css({
                left: (post.left + offs[0]) + 'px',
                top: (post.top + this.$trigger.outerHeight() + offs[1]) + 'px'
            })
        },
        trigger: function() {

            this.$trigger = $(this.options.trigger);

            var _this = this,
                $this = _this.$element;

            $this.addClass('calendar-modal').css('zIndex', _this.options.zIndex);

            $(document).click(function(e) {
                if (_this.$trigger[0] != e.target && !$.contains($this[0], e.target)) {
                    $this.hide();
                }
            }).on('click', this.options.trigger, function() {
                this.$trigger = $(this);
                _this.setPosition();
                $this.show();
            })

            $(window).resize(function() {
                _this.setPosition();
            });
        },
        render: function() {
            this.$week = this.$element.find('.week');
            this.$dateItems = this.$element.find('.date-items');
            this.$monthItems = this.$element.find('.month-items');
            this.$label = this.$element.find('.calendar-label');
            this.$disDate = this.$element.find(DISPLAY_VD);
            this.$disMonth = this.$element.find(DISPLAY_VM);

            var y = this.date.getFullYear(),
                m = this.date.getMonth() + 1;

            this.updateDisDate(y, m);
            this.updateMonthView(y);

            this.fillDateItems(y, m);

            this.options.trigger && this.trigger();

        },
        setView: function(view) {
            this.$element.removeClass(VIEW_CLASS.date + ' ' + VIEW_CLASS.month)
                .addClass(VIEW_CLASS[view]);
            this.view = view;
        },
        updateDateView: function(y, m, dirc, cb) {
            m = m || this.date.getMonth() + 1;

            var _this = this,
                $dis = this.$dateItems,
                exec = {
                    prev: function() {
                        var pm = Date.getPrevMonth(y, m),
                            ppm = Date.getPrevMonth(y, m, 2),
                            $prevItem = _this.getDaysHtml(ppm.y, ppm.m);

                        m = pm.m;
                        y = pm.y;

                        $dis.animate({
                            marginLeft: 0
                        }, 300, 'swing', function() {
                            $dis.children(':last').remove();
                            $dis.prepend($prevItem).css('margin-left', '-100%');

                            $.isFunction(cb) && cb.call(_this);
                        });
                    },
                    next: function() {
                        var nm = Date.getNextMonth(y, m),
                            nnm = Date.getNextMonth(y, m, 2),
                            $nextItem = _this.getDaysHtml(nnm.y, nnm.m);

                        m = nm.m;
                        y = nm.y;

                        $dis.animate({
                            marginLeft: '-200%'
                        }, 300, 'swing', function() {
                            $dis.children(':first').remove();
                            $dis.append($nextItem).css('margin-left', '-100%');

                            $.isFunction(cb) && cb.call(_this);
                        });

                    }
                };


            if (dirc) {
                exec[dirc]();
            } else {
                this.fillDateItems(y, m);
            }

            this.updateDisDate(y, m);

            this.setView('date');

            return {
                y: y,
                m: m
            };
        },
        updateMonthView: function(y) {
            this.updateDisMonth(y);
            this.setMonthAction(y);
            this.setView('month');
        },
        getDisDateValue: function() {
            var arr = this.$disDate.html().split('/'),
                y = Number(arr[0]),
                m = Number(arr[1].match(/\d{1,2}/)[0]);

            return [y, m];
        },
        selectedDay: function(d, type) {
            var arr = this.getDisDateValue(),
                y = arr[0],
                m = arr[1],
                toggleClass = function() {
                    this.$dateItems.children(':eq(1)')
                        .find('[' + ITEM_DAY + ']:not(.' + NEW_DAY_CLASS + ', .' + OLD_DAY_CLASS + ')')
                        .removeClass(SELECT_CLASS)
                        .filter(function(index) {
                            return parseInt(this.innerHTML) === d;
                        }).addClass(SELECT_CLASS);
                };

            if (type) {
                var ret = this.updateDateView(y, m, {
                    'old': 'prev',
                    'new': 'next'
                }[type], toggleClass);
                y = ret.y;
                m = ret.m;
                this.options.viewChange('date', y, m);
            } else {
                toggleClass.call(this);
            }

            return new Date(y, m - 1, d);
        },
        showLabel: function(event, view, date, data) {
            var $lbl = this.$label;

            $lbl.find('p').html(this.options.label.repeat({
                m: view,
                d: date.format(this.options.format),
                v: data
            }).replace(/\n/g, '<br>'));

            var w = $lbl.outerWidth(),
                h = $lbl.outerHeight();

            $lbl.css({
                left: (event.pageX - w / 2) + 'px',
                top: (event.pageY - h - 20) + 'px',
                zIndex: this.options.zIndex + 1
            }).show();
        },
        hasLabel: function() {
            if (this.options.label) {
                $('body').append(this.$label);
                return true;
            }
            return false;
        },
        event: function() {
            var _this = this,
                vc = _this.options.viewChange;


            _this.$element.on('click', DISPLAY_VD, function() {
                var arr = _this.getDisDateValue();
                _this.updateMonthView(arr[0], arr[1]);

                vc('month', arr[0], arr[1]);

            }).on('click', DISPLAY_VM, function() {
                var y = this.innerHTML;

                _this.updateDateView(y);
                vc('date', y);
            });

            // seta
            _this.$element.on('click', ARROW_DATE, function() {
                var arr = _this.getDisDateValue(),
                    type = getClass(this),
                    y = arr[0],
                    m = arr[1];

                var d = _this.updateDateView(y, m, type, function() {
                    vc('date', d.y, d.m);
                });

            }).on('click', ARROW_MONTH, function() {

                var y = Number(_this.$disMonth.html()),
                    type = getClass(this);

                y = type === 'prev' ? y - 1 : y + 1;
                _this.updateMonthView(y);
                vc('month', y);
            });

            // selecionada
            _this.$element.on('click', '[' + ITEM_DAY + ']', function() {
                var d = parseInt(this.innerHTML),
                    cls = getClass(this),
                    type = /new|old/.test(cls) ? cls.match(/new|old/)[0] : '';

                var day = _this.selectedDay(d, type);

                _this.options.onSelected.call(this, 'date', day, $(this).data(MARK_DATA));

                _this.$trigger && _this.hide('date', day, $(this).data(MARK_DATA));

            }).on('click', '[' + ITEM_MONTH + ']', function() {
                var y = Number(_this.$disMonth.html()),
                    m = $(this).index() + 1;

                _this.updateDateView(y, m);
                vc('date', y, m);
                _this.options.onSelected.call(this, 'month', new Date(y, m - 1));
            });

            // hover
            _this.$element.on('mouseenter', '[' + ITEM_DAY + ']', function(e) {
                var $this = $(this),
                    day = $this.attr(ITEM_DAY).toDate();

                if (_this.hasLabel() && $this.data(MARK_DATA)) {
                    _this.showLabel(e, 'date', day, $this.data(MARK_DATA));
                }

                _this.options.onMouseenter.call(this, 'date', day, $this.data(MARK_DATA));
            }).on('mouseleave', '[' + ITEM_DAY + ']', function() {
                _this.$label.hide();
            });
        },
        resize: function() {
            var w = this.width,
                h = this.height,
                hdH = this.$element.find('.calendar-hd').outerHeight();

            this.$element.width(w).height(h + hdH)
                .find('.calendar-inner, .view')
                .css('width', w + 'px');

            this.$element.find('.calendar-ct').width(w).height(h);

        },
        init: function() {

            this.fillStatic();
            this.resize();
            this.render();
            this.view = this.options.view;
            this.setView(this.view);
            this.event();
        },
        setData: function(data) {
            this.data = data;

            if (this.view === 'date') {
                var d = this.getDisDateValue();
                this.fillDateItems(d[0], d[1]);
            } else if (this.view === 'month') {
                this.updateMonthView(this.$disMonth.html());
            }
        },
        setDate: function(date) {
            var dateObj = Date.tryParse(date);
            this.updateDateView(dateObj.getFullYear(), dateObj.getMonth() + 1);
            this.selectedDay(dateObj.getDate());
        },
        methods: function(name, args) {
            if (OS.call(this[name]) === '[object Function]') {
                return this[name].apply(this, args);
            }
        }
    };

    $.fn.calendar = function(options) {
        var calendar = this.data('calendar'),
            fn,
            args = [].slice.call(arguments);

        if (!calendar) {
            return this.each(function() {
                return $(this).data('calendar', new Calendar(this, options));
            });
        }
        if (isString(options)) {
            fn = options;
            args.shift();
            return calendar.methods(fn, args);
        }

        return this;
    }

    $.fn.calendar.defaults = defaults;

}));
var URL_API = 'http://mocs.000webhostapp.com/api/public/';

var Storage = (() => {
    var prefix = "mocs_";

    function Storage() { }

    Storage.prototype.gravar = function (entidade, dados) {
        localStorage.setItem(prefix + entidade, JSON.stringify(dados));
    }

    Storage.prototype.recuperar = function (entidade) {
        return this.existe(entidade) ? JSON.parse(localStorage.getItem(prefix + entidade)) : null;
    }

    Storage.prototype.existe = function (entidade) {
        return localStorage.getItem(prefix + entidade) ? true : false;
    }

    Storage.prototype.remover = function (entidade) {
        localStorage.removeItem(prefix + entidade);
    }

    return Storage;
})();

function isUserAuth() {
    var storage = new Storage();

    if (!storage.existe('token')) {
        window.location.href = "error.html";
    }
}


(function($) {

    var eCalendar = function(options, object) {
        // Inicializando variáveis globais
        var adDay = new Date().getDate();
        var adMonth = new Date().getMonth();
        var adYear = new Date().getFullYear();
        var dDay = adDay;
        var dMonth = adMonth;
        var dYear = adYear;
        var instance = object;

        var settings = $.extend({}, $.fn.eCalendar.defaults, options);

        function lpad(value, length, pad) {
            if (typeof pad == 'undefined') {
                pad = '0';
            }
            var p;
            for (var i = 0; i < length; i++) {
                p += pad;
            }
            return (p + value).slice(-length);
        }

        var mouseOver = function() {
            $(this).addClass('c-nav-btn-over');
        };
        var mouseLeave = function() {
            $(this).removeClass('c-nav-btn-over');
        };
        var mouseOverEvent = function() {
            $(this).addClass('c-event-over');
            var d = $(this).attr('data-event-day');
            $('div.c-event-item[data-event-day="' + d + '"]').addClass('c-event-over');
        };
        var mouseLeaveEvent = function() {
            $(this).removeClass('c-event-over')
            var d = $(this).attr('data-event-day');
            $('div.c-event-item[data-event-day="' + d + '"]').removeClass('c-event-over');
        };
        var mouseOverItem = function() {
            $(this).addClass('c-event-over');
            var d = $(this).attr('data-event-day');
            $('div.c-event[data-event-day="' + d + '"]').addClass('c-event-over');
        };
        var mouseLeaveItem = function() {
            $(this).removeClass('c-event-over')
            var d = $(this).attr('data-event-day');
            $('div.c-event[data-event-day="' + d + '"]').removeClass('c-event-over');
        };
        var nextMonth = function() {
            if (dMonth < 11) {
                dMonth++;
            } else {
                dMonth = 0;
                dYear++;
            }
            print();
        };
        var previousMonth = function() {
            if (dMonth > 0) {
                dMonth--;
            } else {
                dMonth = 11;
                dYear--;
            }
            print();
        };

        function loadEvents() {
            if (typeof settings.url != 'undefined' && settings.url != '') {
                $.ajax({
                    url: settings.url,
                    async: false,
                    success: function(result) {
                        settings.events = result;
                    }
                });
            }
        }

        function print() {
            loadEvents();
            var dWeekDayOfMonthStart = new Date(dYear, dMonth, 1).getDay() - settings.firstDayOfWeek;
            if (dWeekDayOfMonthStart < 0) {
                dWeekDayOfMonthStart = 6 - ((dWeekDayOfMonthStart + 1) * -1);
            }
            var dLastDayOfMonth = new Date(dYear, dMonth + 1, 0).getDate();
            var dLastDayOfPreviousMonth = new Date(dYear, dMonth + 1, 0).getDate() - dWeekDayOfMonthStart + 1;

            var cBody = $('<div/>').addClass('c-grid');
            var cEvents = $('<div/>').addClass('c-event-grid');
            var cEventsBody = $('<div/>').addClass('c-event-body');
            cEvents.append($('<div/>').addClass('c-event-title c-pad-top').html(settings.eventTitle));
            cEvents.append(cEventsBody);
            var cNext = $('<div/>').addClass('c-next c-grid-title c-pad-top');
            var cMonth = $('<div/>').addClass('c-month c-grid-title c-pad-top');
            var cPrevious = $('<div/>').addClass('c-previous c-grid-title c-pad-top');
            cPrevious.html(settings.textArrows.previous);
            cMonth.html(settings.months[dMonth] + ' ' + dYear);
            cNext.html(settings.textArrows.next);

            cPrevious.on('mouseover', mouseOver).on('mouseleave', mouseLeave).on('click', previousMonth);
            cNext.on('mouseover', mouseOver).on('mouseleave', mouseLeave).on('click', nextMonth);

            cBody.append(cPrevious);
            cBody.append(cMonth);
            cBody.append(cNext);
            var dayOfWeek = settings.firstDayOfWeek;
            for (var i = 0; i < 7; i++) {
                if (dayOfWeek > 6) {
                    dayOfWeek = 0;
                }
                var cWeekDay = $('<div/>').addClass('c-week-day c-pad-top');
                cWeekDay.html(settings.weekDays[dayOfWeek]);
                cBody.append(cWeekDay);
                dayOfWeek++;
            }
            var day = 1;
            var dayOfNextMonth = 1;
            for (var i = 0; i < 42; i++) {
                var cDay = $('<div/>');
                if (i < dWeekDayOfMonthStart) {
                    cDay.addClass('c-day-previous-month c-pad-top');
                    cDay.html(dLastDayOfPreviousMonth++);
                } else if (day <= dLastDayOfMonth) {
                    cDay.addClass('c-day c-pad-top');
                    if (day == dDay && adMonth == dMonth && adYear == dYear) {
                        cDay.addClass('c-today');
                    }
                    for (var j = 0; j < settings.events.length; j++) {
                        var d = settings.events[j].datetime;
                        if (d.getDate() == day && d.getMonth() == dMonth && d.getFullYear() == dYear) {
                            cDay.addClass('c-event').attr('data-event-day', d.getDate());
                            cDay.on('mouseover', mouseOverEvent).on('mouseleave', mouseLeaveEvent);
                        }
                    }
                    cDay.html(day++);
                } else {
                    cDay.addClass('c-day-next-month c-pad-top');
                    cDay.html(dayOfNextMonth++);
                }
                cBody.append(cDay);
            }
            var eventList = $('<div/>').addClass('c-event-list');
            for (var i = 0; i < settings.events.length; i++) {
                var d = settings.events[i].datetime;
                if (d.getMonth() == dMonth && d.getFullYear() == dYear) {
                    var date = lpad(d.getDate(), 2) + '/' + lpad(d.getMonth() + 1, 2) + ' ' + lpad(d.getHours(), 2) + ':' + lpad(d.getMinutes(), 2);
                    var item = $('<div/>').addClass('c-event-item');
                    var title = $('<div/>').addClass('title').html(date + '  ' + settings.events[i].title + '<br/>');
                    var description = $('<div/>').addClass('description').html(settings.events[i].description + '<br/>');
                    item.attr('data-event-day', d.getDate());
                    item.on('mouseover', mouseOverItem).on('mouseleave', mouseLeaveItem);
                    item.append(title).append(description);

                    // Add url para a descrição
                    if (settings.events[i].url !== undefined) {
                        /** se a configuração url vazio é escolhida e é verdade, o alvo da url será vazio
                         */
                        type_url = settings.events[i].url_blank !== undefined &&
                            settings.events[i].url_blank === true ?
                            '_blank' : '';
                        description.wrap('<a href="' + settings.events[i].url + '" target="' + type_url + '" ></a>');
                    }

                    eventList.append(item);
                }
            }
            $(instance).addClass('calendar');
            cEventsBody.append(eventList);
            $(instance).html(cBody).append(cEvents);
        }

        return print();
    }

    $.fn.eCalendar = function(oInit) {
        return this.each(function() {
            return eCalendar(oInit, $(this));
        });
    };

    // plugin defaults
    $.fn.eCalendar.defaults = {
        weekDays: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'],
        months: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
        textArrows: { previous: '<', next: '>' },
        eventTitle: 'Eventos',
        url: '',
        events: [
            { title: 'Evento de Abertura', description: 'Abertura das Olimpíadas Rio 2016', datetime: new Date(2017, 7, 12, 17) },
            { title: 'Tênis de Mesa', description: 'BRA x ARG - Semifinal', datetime: new Date(2016, new Date().getMonth(), 23, 16) },
            { title: 'Ginástica Olímpica', description: 'Classificatórias de equipes', datetime: new Date(2016, new Date().getMonth(), 31, 16) }
        ],
        firstDayOfWeek: 0
    };

}(jQuery));
Vue.component('add-item', {
    props: ['item'],
    template: `
    <div id="add-item" class="card-view mdl-card mdl-shadow--2dp">
        <div class="mdl-card__title mdl-card--border">
            <h2 class="mdl-card__title-text">
                <span v-show="item">Editar obra</span>
                <span v-show="!item"> Adicionar uma obra</span>
            </h2>
        </div>
        <div class="mdl-card__supporting-text" style="width: 100%">
            <div class="row">
                <div class="col-sm-4" style="margin-bottom: 24px">
                    <label for="image-input" class="enviar-imagem mdl-button mdl-js-button mdl-button--raised">
                        Enviar imagem
                    </label>
                    <input id="image-input" type="file" @change="handleUpload"/>
                    <div class="imagem-preview">
                        <div v-show="imagem" class="imagem-content" v-bind:style="{ backgroundImage: 'url(' + imagem + ')' }">
                        </div>
                        <button v-on:click="removeFoto()" id="remove-foto" v-show="imagem" class="remove-foto mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored mdl-button--raised">
                            <i class="material-icons">close</i>
                        </button>
                        <div class="mdl-tooltip" data-mdl-for="remove-foto">Remover foto</div>
                        <div class="mdl-color-text--red-500" style="text-aling: center;text-transform: uppercase;margin-top: 16px">{{error.message}}</div>
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="mdl-textfield mdl-js-textfield">
                        <input class="mdl-textfield__input" v-model="titulo" type="text" id="obraNome">
                        <label class="mdl-textfield__label" for="obraNome">Título da obra</label>
                    </div>
                    <div class="mdl-textfield mdl-js-textfield">
                        <textarea class="mdl-textfield__input" v-model="descricao" type="text" rows= "3" id="obraDescricao" ></textarea>
                        <label class="mdl-textfield__label" for="obraDescricao">Descrição da obra</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="mdl-card__actions mdl-card--border" style="display: flex">
            <a v-on:click="close()" class="mdl-button mdl-js-button">
                Cancelar
            </a>
            <div style="flex-grow: 1"></div>
            <a id="add-obra-button" :disabled="!valido()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
                <span v-show="item">Salvar obra</span>
                <span v-show="!item">Adicionar Obra</span>
            </a>
        </div>
    </div>
    `,
    data: function () {
        return {
            imagem: "",
            titulo: "",
            descricao: "",
            error: {
                type: 'success',
                message: ''
            }
        }
    },
    methods: {
        handleUpload: function (e, clear) {
            var files = e.target.files;
            var reader = new FileReader();

            var tipos = ['png', 'jpeg', 'jpg', 'gif'], permitido = false;
            var extensao = files[0].type.split('/')[1];

            tipos.map((value) => {
                permitido = value == extensao ? true : permitido;
            });

            if (permitido) {
                reader.addEventListener('load', () => {
                    this.imagem = reader.result;
                    this.error.message = "";
                });
                reader.readAsDataURL(files[0]);
            } else {
                this.error.message = "Formato de imagem inválido";
                this.removeFoto();
            }
        },
        removeFoto: function () {
            this.imagem = "";
            document.getElementById('image-input').value = "";
        },
        valido: function () {
            return this.imagem && this.titulo && this.descricao ? true : false;
        },
        close: function () {
            this.imagem = "";
            this.titulo = "";
            this.descricao = "";
            this.item = "";
            this.$emit('closeModalAdd');
            $('#add-item .mdl-textfield').removeClass('is-dirty');
            $('#dashboard_main').removeClass('noscroll');
        }
    },
    watch: {
        item: function () {
            if (this.item) {
                this.imagem = this.item.imagem;
                this.titulo = this.item.titulo;
                this.descricao = this.item.descricao;
                $('#add-item .mdl-textfield').addClass('is-dirty');
            }
        }
    },
    created: function () {
    }
});
Vue.component('login-modal', {
    template: `
    <modal id="login-modal">
        <div slot="modal-body">
            <button class="loginBtn loginBtn--facebook">
                Login pelo Facebook
            </button>
            <button class="loginBtn loginBtn--google">
                Login pelo Google
            </button>
            <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                <input class="mdl-textfield__input" type="text" v-model="name" id="username_input">
                <label class="mdl-textfield__label" for="username_input">Email</label>
            </div>
            <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                <input class="mdl-textfield__input" v-model="password" type="password" id="pass_input">
                <label class="mdl-textfield__label" for="pass_input">Senha</label>
            </div>
        </div>
        <div slot="modal-actions" style="display: flex;">
            <span style="flex-grow: 1"></span>
            <a v-on:click="login()" :disabled="!valido()" style="float: right" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
                Entrar
            </a>
        </div>
    </modal>
    `,
    data: function () {
        return {
            name: '',
            password: ''
        }
    },
    methods: {
        valido: function () {
            return this.name && this.password;
        },
        login: function () {
            var params = {
                login: this.name,
                senha: this.password,
            }
            $.post(URL_API + 'login', params)
                .done(function (data) {
                    if (data.token) {
                        localStorage.setItem("token", data.token);
                        location.href = "dashboard.html";
                    } else {
                        console.log(data);
                        if(data == 404){
                            // document.getElementById("alertaErro").innerHTML=`<div class="alert alert-danger" id="alert">Usuario ou senha incorreta</div>`;
                        }
                    }
                }).fail(function (error) {
                    console.log(error);
                });
        }
    }
});
Vue.component('modal', {
    template: `
<transition name="modal">
    <div class="card-view mdl-card mdl-shadow--2dp">
        <div class="mdl-card__title">
            <h2 class="mdl-card__title-text">
                <slot name="modal-title"></slot>
            </h2>
        </div>
        <div class="mdl-card__supporting-text">
            <slot name="modal-body"></slot>
        </div>
        <div class="mdl-card__actions mdl-card--border">
            <slot name="modal-actions"></slot>
        </div>
    </div>
</transition>
    `
});
Vue.component('ripple', {
    props: ['state'],
    template: `
        <div id="ripple" class="ripple fadeInRipple">
            <spinner v-show="state == 'loading'"></spinner>
            <div v-show="state != 'loading'">
                 <i style="font-size: 2em" class="mdl-color-text--white material-icons">done</i>
            </div>
        </div>
    `,
    created: function () {
        this.$nextTick(() => {
            if (this.state == 'loading') {
                $('#ripple').addClass('mdl-color--red-400');
                $('#ripple').removeClass('mdl-color--green-600');
            } else {
                $('#ripple').addClass('mdl-color--green-600');
                $('#ripple').removeClass('mdl-color--red-400');
            }
        });
    },
    watch: {
        state: function (value) {
            if (this.state == 'loading') {
                $('#ripple').addClass('mdl-color--red-400');
                $('#ripple').removeClass('mdl-color--green-600');
            } else {
                $('#ripple').addClass('mdl-color--green-600');
                $('#ripple').removeClass('mdl-color--red-400');
            }
        }
    },
});
Vue.component('spinner', {
    template: `
<div class="loading" style="border-radius: 50px;display: block;margin: 0 auto;width: 30px;height: 30px;border: 3px solid rgba(255, 255,255, 0.2);border-top: 3px solid white;"></div>
    `
});
Vue.component('itens-view', {
    template: `
<div id="itens-view">
    <div id="seachbar" class="card-view mdl-card mdl-shadow--2dp">
        <div class="mdl-card__title">
            <div class="mdl-textfield mdl-js-textfield" id="search-input">
                <input class="mdl-textfield__input" type="text" id="search" v-model="searchText">
                <label class="mdl-textfield__label" for="search">Pesquisar por uma obra</label>
            </div>

            <button v-on:click="addItem()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
                Adicionar Item
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-4" v-for="obra in obras" style="padding-bottom: 16px">
            <div class="item mdl-card mdl-shadow--4dp" @click="openItem()">
                <div class="obra-foto" style="background-image: url('https://conexaoparis.s3.amazonaws.com/wp-content/uploads/2007/06/909.jpg')">
                </div>
                <div class="mdl-card__title">
                    <h2 class="mdl-card__title-text">{{obra.nome}}</h2>
                </div>
                <div class="mdl-card__supporting-text">
                    {{obra.descricao}}
                </div>
            </div>
        </div>
    </div>
    
    <div class="mocs-obfuscator" v-show="openItemModal">
        <add-item class="zoonIn" :item="selectedItem" @closeModalAdd="modalClosed"></add-item>
    </div>
</div>
    `,
    data: function () {
        return {
            searchText: '',
            openItemModal: false,
            selectedItem: '',
            obras: []
        }
    },
    methods: {
        addItem: function () {
            this.openItemModal = true;
            $('#dashboard_main').addClass('noscroll');
        },
        openItem: function () {
            this.selectedItem = {
                imagem: "https://conexaoparis.s3.amazonaws.com/wp-content/uploads/2007/06/909.jpg",
                titulo: "Obra A",
                descricao: "Lorem ipsum dolor sit amet, consectetur adipiscing elit Mauris sagittis pellentesque lacus eleifend lacinia"
            }
            this.addItem();
        },
        modalClosed: function () {
            this.selectedItem = '';
            this.openItemModal = false
        },
        getObras: function () {
            var storage = new Storage(), t = this;
            $.get(URL_API + 'obra', storage.recuperar('token').token)
                .done(function (data) {
                    t.obras = data;
                }).fail(function (error) {
                });
        }
    },
    created: function () {
        this.getObras();
    }
});
Vue.component('perfil-view', {
    template: `
<div id="perfil-view" class="card-view mdl-card mdl-shadow--2dp">
    <div class="mdl-card__title">
        <h5 class="mdl-color-text--grey-700" style="margin: 0">Alterar Dados</h5>
    </div>
    <div class="mdl-card__supporting-text">
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="text" v-model="conta.nome" id="name_input" placeholder="">
            <label class="mdl-textfield__label" for="name_input">Nome</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="text" id="username_input" v-model="conta.email" placeholder="">
            <label class="mdl-textfield__label" for="username_input">Email</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="text" id="username_input" v-model="conta.telefone" placeholder="">
            <label class="mdl-textfield__label" for="username_input">Telefone</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="password" id="pass_input" v-model="conta.senha">
            <label class="mdl-textfield__label" for="pass_input">Senha Antiga</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="password" id="pass_input" v-model="conta.senhaNova">
            <label class="mdl-textfield__label" for="pass_input_new">Senha Nova</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            <input class="mdl-textfield__input" type="password" id="rpass_input" v-model="conta.senhaRepit">
            <label class="mdl-textfield__label" for="pass_input">Repetir senha</label>
        </div>
    </div>
    <div class="mdl-card__actions mdl-card--border" style="display: flex">
        <div style="flex-grow: 1"></div>
        <a v-on:click="load()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
            Salvar dados
        </a>
    </div>
    <ripple v-show="loading" :state="state"></ripple>
</div>
    `,
    data: function () {
        return {
            loading: false,
            state: 'loading',
            conta: {}
        }
    },
    methods: {
        load: function () {
            if (this.conta.senhaRepit != this.conta.senhaNova) {
                console.log("Senhas diferentes");
            } else if (!this.conta.senha && this.conta.senhaNova) {
                console.log("Informe a senha antiga")
            } else {
                this.loading = true;
                setTimeout(() => {
                    this.state = 'ready';

                    setTimeout(() => {
                        this.loading = false;
                        this.state = 'loading';
                    }, 1000);
                }, 2000);

                $.post(URL_API + 'usuario/update', this.conta)
                    .done(function (data) {
                        console.log(data);
                    }).fail(function (error) {
                        console.log(error);
                    });
            }
        }
    },
    created: function () {
        perfil((conta) => {
            this.conta = conta;
            this.conta.token = localStorage.getItem("token");
        });

    }
});

function perfil(callBack) {
    let token = localStorage.getItem("token");
    $.post(URL_API + 'usuario/perfil', { token: token })
        .done(function (data) {
            console.log(data);
            callBack(data);
        }).fail(function (error) {
            console.log(error);
        });
}
Vue.component('usuarios-view', {
    template: `
<div id="usuarios-view">
    <div id="seachbar" class="card-view mdl-card mdl-shadow--2dp" style="overflow: visible">
        <div class="mdl-card__title">
            <div class="mdl-textfield mdl-js-textfield" id="search-input">
                <input class="mdl-textfield__input" type="text" id="search" v-model="searchText">
                <label class="mdl-textfield__label" for="search">Pesquisar por um usuário</label>
            </div>
            <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored" :disabled="!searchText">
                Pesquisar
            </button>
        </div>
        <div class="mdl-card__actions mdl-card--border">
            <ul class="usuarios-list mdl-list">
                <li class="mdl-list__item" style="padding: 8px 16px">
                    <span class="mdl-list__item-primary-content">
                        Usuário A
                    </span>
                    <button id="mudar-funcao-0" class="mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-color--indigo-500 mdl-color-text--white">
                        <i class="material-icons">assignment</i>
                    </button>
                    <ul class="mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="mudar-funcao-0">
                        <li class="mdl-menu__item">Função A</li>
                        <li class="mdl-menu__item">Função B</li>
                        <li class="mdl-menu__item">Função C</li>
                    </ul>
                </li>
                <hr style="border-color: #e5e5e5; margin: 0" />
                <li class="mdl-list__item" style="padding: 8px 16px">
                    <span class="mdl-list__item-primary-content">
                        Usuário B
                    </span>
                    <button id="mudar-funcao-1" class="mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-color--indigo-500 mdl-color-text--white">
                        <i class="material-icons">assignment</i>
                    </button>
                    <ul class="mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="mudar-funcao-1">
                        <li class="mdl-menu__item">Função A</li>
                        <li class="mdl-menu__item">Função B</li>
                        <li class="mdl-menu__item">Função C</li>
                    </ul>
                </li>
                <hr style="border-color: #e5e5e5; margin: 0" />
                <li class="mdl-list__item" style="padding: 8px 16px">
                    <span class="mdl-list__item-primary-content">
                        Usuário C
                    </span>
                    <button id="mudar-funcao-2" class="mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-color--indigo-500 mdl-color-text--white">
                        <i class="material-icons">assignment</i>
                    </button>
                    <ul class="mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="mudar-funcao-2">
                        <li class="mdl-menu__item">Função A</li>
                        <li class="mdl-menu__item">Função B</li>
                        <li class="mdl-menu__item">Função C</li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>
    `,
    data: function () {
        return {
            searchText: ''
        }
    },
    methods: {
    }
});